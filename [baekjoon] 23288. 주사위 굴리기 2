#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

const int MAX = 21;

//동 서 남 북 0 1 2 3 
int dy[4]={0,0,1,-1};
int dx[4]={1,-1,0,0};
int map[MAX][MAX];
int check[MAX][MAX];
int N,M,K;
int score;
int y,x,dir;
int dice[7]={0,1,2,3,4,5,6};
int d1,d2,d3,d4,d5,d6;

void movedice(int dir){
	d1=dice[1], d2=dice[2], d3=dice[3];
	d4=dice[4], d5=dice[5], d6=dice[6];
	if(dir==0){
		dice[1]=d4;
		dice[3]=d1;
		dice[4]=d6;
		dice[6]=d3;
	}
	else if(dir==1){
		dice[1]=d3;
		dice[3]=d6;
		dice[4]=d1;
		dice[6]=d4;
	}
	else if(dir==2){
		dice[1]=d2;
		dice[2]=d6;
		dice[5]=d1;
		dice[6]=d5;
	}
	else if(dir==3){
		dice[1]=d5;
		dice[2]=d1;
		dice[5]=d6;
		dice[6]=d2;
	}
}
				
int getscore(int yy,int xx,int k){
	queue <pair<int,int>> Q;
	Q.push({yy,xx});
	check[yy][xx]=k;
	int val = map[yy][xx];
	int cnt=1;
	
	while(!Q.empty()){
		int curY=Q.front().first;
		int curX=Q.front().second;
		Q.pop();
		for(int i=0;i<4;i++){
			int ny=curY+dy[i];
			int nx=curX+dx[i];
			if(ny>0 && nx>0 && ny<=N && nx<=M && map[ny][nx]==val && check[ny][nx]<k){
				Q.push({ny,nx});
				check[ny][nx]=k;
				cnt++;
			}
		}
	}
	return cnt;
}			
				
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	
	cin>>N>>M>>K;
	for(int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			cin>>map[i][j];
		}
	}
	
	//동 서 남 북 0, 1, 2, 3 
	x=1,y=1,dir=0;
	for(int k=1;k<=K;k++){
		int ny=y+dy[dir];
		int nx=x+dx[dir];
		if(ny<1 || nx<1 || ny>N || nx>M) {
			if(dir==0) dir=1;
			else if(dir==1) dir=0;
			else if(dir==2) dir=3;
			else if(dir==3) dir=2;
			ny=y+dy[dir];
			nx=x+dx[dir];
		}
		
		movedice(dir);
		score += (getscore(ny,nx,k) * map[ny][nx]);
		if(dice[6] > map[ny][nx]) {
			if(dir==0) dir=2;
			else if(dir==1) dir=3;
			else if(dir==2) dir=1;
			else if(dir==3) dir=0;
		}
		else if(dice[6] < map[ny][nx]){
			if(dir==0) dir=3;
			else if(dir==1) dir=2;
			else if(dir==2) dir=0;
			else if(dir==3) dir=1;
		}
		y=ny;
		x=nx;
	}
	
	cout<<score;
    return 0;
}
