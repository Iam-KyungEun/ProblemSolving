#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>

using namespace std;

bool check[1001];
vector < vector<int> > map;

void dfs(int vertex){
	cout<<vertex<<" ";
	for(int i=0;i<map[vertex].size();i++){
		int next = map[vertex][i];
		if(!check[next]){
			check[next]=true;
			dfs(next);
		}
	}
}

int main(){
	int N,M,V,a,b;
	cin>>N>>M>>V;
	map.assign(N+1,vector<int>(0));
	for(int i=0;i<M;i++){
		cin>>a>>b;
		map[a].push_back(b);
		map[b].push_back(a);
	}
	for(int i=1;i<=N;i++){
		sort(map[i].begin(),map[i].end());
	}
	check[V]=true;
	dfs(V);
	cout<<"\n";
	
	memset(check,0,sizeof(check));
	
  //BFS
	queue <int> Q;
	check[V]=true;
	Q.push(V);
	while(!Q.empty()){
		int vertex = Q.front();
		Q.pop();
		cout<<vertex<<" ";
		for(int i=0;i<map[vertex].size();i++){
			int next = map[vertex][i];
			if(!check[next]){
				check[next]=true;
				Q.push(next);
			}
		}
	}
	
	return 0;
}
