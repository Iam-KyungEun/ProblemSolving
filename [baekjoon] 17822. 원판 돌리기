#include <iostream>
#include <cstring>

using namespace std;

const int MAX = 52;

int plate[MAX][MAX];
bool check[MAX][MAX];
int temp[MAX];
int T,N,M;
void dfs(int i,int j,int cnt);
void find();

void rotate(int plate_num, int dir, int k){
	if(dir==0){ //clock 
		for(int i=M;i>=M-k;i--){
			temp[i-M+k]=plate[plate_num][i];
		}
		for(int i=M;i>k;i--){
			plate[plate_num][i]=plate[plate_num][i-k];
		}
		for(int i=1;i<=k;i++){
			plate[plate_num][i]=temp[i];
		}
	}
	else if(dir==1) {//counter clock
		for(int i=1;i<=k;i++){
			temp[i+M-k]=plate[plate_num][i];
		}
		for(int i=1;i<=M-k;i++){
			plate[plate_num][i]=plate[plate_num][i+k];
		}
		for(int i=M-k+1;i<=M;i++){
			plate[plate_num][i]=temp[i];
		}
	}
}

void find(){
	int sum=0,cnt=0;
	bool flag=false;
	for(int i=1;i<=N;i++){
		for(int j=M;j>0;j--){
			if(plate[i][j]>0 && !check[i][j]){
				dfs(i,j,0);
				if(plate[i][j]>0) {
					sum+=plate[i][j];
					cnt++;
				} else flag=true;
			}
		}
	}
	memset(check,0,sizeof(check));
	if(flag || cnt==0) return;
	double aver=float(sum)/cnt;
	for(int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			if(plate[i][j]>aver) plate[i][j]--;
			else if(plate[i][j]>0 && plate[i][j]<aver) plate[i][j]++;
		}
	}
}

void dfs(int i,int j,int cnt){
	check[i][j]=true;
	bool flag=false;
	if(!check[i+1][j] && plate[i+1][j]==plate[i][j]){
		dfs(i+1,j,cnt+1);
		flag=true;
	}
	if(!check[i-1][j] && plate[i-1][j]==plate[i][j]){
		dfs(i-1,j,cnt+1);
		flag=true;
	}

	if(j==1) {
		if(!check[i][j+1] && plate[i][j+1]==plate[i][j]){
			dfs(i,j+1,cnt+1);
			flag=true;
		}
		if(!check[i][M] && plate[i][M]==plate[i][j]){
			dfs(i,M,cnt+1);
			flag=true;
		}
	}
	else if(j==M) {
		if(!check[i][j-1] && plate[i][j-1]==plate[i][j]){
			dfs(i,j-1,cnt+1);
			flag=true;
		}
		if(!check[i][1] && plate[i][1]==plate[i][j]){
			dfs(i,1,cnt+1);
			flag=true;
		}
	}
	else{
		if(!check[i][j+1] && plate[i][j+1]==plate[i][j]){
			dfs(i,j+1,cnt+1);
			flag=true;
		}
		if(!check[i][j-1] && plate[i][j-1]==plate[i][j]){
			dfs(i,j-1,cnt+1);
			flag=true;
		}
	}

	if(cnt>0) plate[i][j]=0;
	else if(flag) plate[i][j]=0;
}


int main()
{
	int x,d,k;
	
	cin>>N>>M>>T;
	for(int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			cin>>plate[i][j];
		}
	}
	for(int t=1;t<=T;t++){
		cin>>x>>d>>k;
		for(int j=x;j<=N;j+=x){
			rotate(j,d,k);
		}
		find();
	}
	int sum=0;
	for(int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			sum+=plate[i][j];
		}
	}
	cout<<sum;
	
    return 0;
}
