#include <iostream>
#include <vector>

using namespace std;

const int MAX = 50;

int P[MAX];
int S[MAX];

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	
	int N;
	
	vector <int> card;
	vector <int> tempCard;
	
	cin>>N;
	
	tempCard.assign(N,0);
	card.assign(N,0);
	
	for(int i=0;i<N;i++){
		P[i]=i%3;
	}
	
	for(int i=0;i<N;i++){
		cin>>card[i];
	}
	
	vector <int> origin(card.begin(),card.end());
	
	for(int i=0;i<N;i++){
		cin>>S[i];
	}
	
	bool flag=true;

	for(int i=0;i<N;i++){
		if(card[i] != P[i]) flag=false;
	}
	
	if(flag){
		cout<<"0";
		return 0;
	}
	
	int cnt=1;
	while(1){
		for(int i=0;i<N;i++){
			tempCard[S[i]] = card[i];
		}
		
		card.swap(tempCard);
		
		bool flag=true;
		bool cycle=true;
		
		for(int i=0;i<N;i++){
			if(card[i] != P[i]) flag=false;
			if(card[i] != origin[i]) cycle=false;
			if(!flag && !cycle) break;
		}
		
		if(flag){
			cout<<cnt;
			return 0;
		}
		else if(cycle) {
			cout<<"-1";
			return 0;
		}
		cnt++;
	}
	
	return 0;
}
