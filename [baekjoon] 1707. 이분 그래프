#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

const int MAX = 20001;
int K,V,E;

vector <int> graph[MAX];
int group[MAX];
bool flag;

void dfs(int node){
	if(flag) return;
	for(int i=0;i<graph[node].size();i++){
		int next=graph[node][i];

		if(group[next]==0){
			if(group[node]==1) group[next]=2;
			else group[next]=1;
			dfs(next);
		}
		else if(group[node]==group[next]) {
			flag=true;
			return;
		}
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	
	cin>>K;
	for(int tc=1;tc<=K;tc++){
		cin>>V>>E;
		int a,b;
		vector <int> graph[MAX];

		for(int i=0;i<E;i++){
			cin>>a>>b;
			graph[a].push_back(b);
			graph[b].push_back(a);
		}
		flag=false;
		for(int i=1;i<=V;i++){
			if(group[i]==0) {
				group[i]=1;
				dfs(i);
			}
		}
		if(flag) cout<<"NO"<<"\n";
		else cout<<"YES"<<"\n";
		
		memset(group,0,sizeof(group));
		memset(graph,0,sizeof(graph));
	}
	
	return 0;
}
