#include <iostream>
#include <string>
#include <queue>

using namespace std;

const int MAX = 101;

int map[MAX][MAX];
int check[MAX][MAX];

int N,M;
int dy[4]={-1,1,0,0};
int dx[4]={0,0,-1,1};

void bfs(int y,int x){
	queue < pair<int,int> > Q;
	check[y][x]=1;
	Q.push({y,x});
	while(!Q.empty()){
		int curY=Q.front().first;
		int curX=Q.front().second;
		
		Q.pop();
		
		for(int i=0;i<4;i++){
			int ny=curY+dy[i];
			int nx=curX+dx[i];
			if(ny>=0 && nx>=0 && ny<N && nx<M && !check[ny][nx] && map[ny][nx]==1){
				check[ny][nx]=check[curY][curX]+1;
				Q.push({ny,nx});
			}
		}	
		
	}
	
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin>>N>>M;
	string str;
	for(int i=0;i<N;i++){
		cin>>str;
		for(int j=0;j<str.size();j++){
			map[i][j]=str[j]-'0';
		}
	}
	
	bfs(0,0);
	cout<<check[N-1][M-1];
	return 0;
}
