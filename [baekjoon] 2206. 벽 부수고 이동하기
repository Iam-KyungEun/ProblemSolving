#include <iostream>
#include <queue>
#include <string>

using namespace std;

const int MAX = 1001;

bool map[MAX][MAX];
int check1[MAX][MAX];
int check2[MAX][MAX];
int dy[4]={-1,1,0,0};
int dx[4]={0,0,-1,1};
bool flag = false;
int ans=987987987;
int N,M;

void bfs(int yy,int xx, int check[][MAX]){
	queue < pair<int,int> > Q;
	Q.push({yy,xx});
	check[yy][xx]=1;
	
	while(!Q.empty()){
		int y=Q.front().first;
		int x=Q.front().second;
		Q.pop();
		for(int i=0;i<4;i++){
			int ny=y+dy[i];
			int nx=x+dx[i];
			if(ny>=0 && nx>=0 && ny<N && nx<M && !check[ny][nx]){
				if(map[ny][nx]==0){
					Q.push({ny,nx});
				}
				check[ny][nx]=check[y][x]+1;
				if((ny==0 && nx==0) || (ny==N-1 && nx==M-1)) {
					flag = true;
					ans=min(ans,check[ny][nx]+1);
				}
			}
		}
	}
	return;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	
	string str;
	cin>>N>>M;
	for(int i=0;i<N;i++){
		cin>>str;
		for(int j=0;j<M;j++){
			map[i][j]=str[j]-'0';
		}
	}
	
	bfs(0,0,check1);
	bfs(N-1,M-1,check2);
	
	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++){
			if(map[i][j]==1){
				if(check1[i][j]>0 && check2[i][j]>0){
					flag=true;
					ans=min(ans,check1[i][j]+check2[i][j]);
				}
			}
		}
	}
	if(N==1 && M==1) cout<<"1";
	else if(!flag) cout<<"-1";
	else cout<<ans-1;
	return 0;
}
