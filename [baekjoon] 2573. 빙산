#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

const int MAX = 301;

int map[MAX][MAX];
bool check[MAX][MAX];

int dy[4]={-1,1,0,0};
int dx[4]={0,0,-1,1};
int N,M;

struct info{
	int y;
	int x;
	int cnt;
};

void BFS(int y,int x){
	queue < pair<int,int> > Q;
	Q.push({y,x});
	check[y][x]=true;
	
	while(!Q.empty()){
		int curY=Q.front().first;
		int curX=Q.front().second;
		Q.pop();
		for(int i=0;i<4;i++){
			int ny=curY+dy[i];
			int nx=curX+dx[i];
			if(ny>=0 && nx>=0 && ny<N && nx<M && !check[ny][nx] && map[ny][nx]>0){
				check[ny][nx]=true;
				Q.push({ny,nx});
			}
			
		}
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	int ans=1;
	cin>>N>>M;
	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++){
			cin>>map[i][j];
		}
	}
	queue <info> Q;
	while(1){
		bool flag=false;
		for(int i=0;i<N;i++){
			for(int j=0;j<M;j++){
				if(map[i][j]>0){
					int cnt=0;
					for(int k=0;k<4;k++){
						int ny=i+dy[k];
						int nx=j+dx[k];
						if(ny>=0 && nx>=0 && ny<N && nx<M && map[ny][nx]==0){
							cnt++;
						}
					}
					Q.push({i,j,cnt});
				}
			}
		}
		while(!Q.empty()){
			int y=Q.front().y;
			int x=Q.front().x;
			int cnt=Q.front().cnt;
			map[y][x]-=cnt;
			if(map[y][x]<0) map[y][x]=0;
			Q.pop();
		}
		for(int i=0;i<N;i++){
			for(int j=0;j<M;j++){
				if(map[i][j]>0 && !check[i][j]){
					if(!flag){
						BFS(i,j);
						flag=true;
					}
					else{
						cout<<ans;
						return 0;
					}
				}
			}
		}
		if(!flag){
			cout<<0;
			return 0;
		}
		memset(check,0,sizeof(check));
		ans++;
	}

	return 0;
}
