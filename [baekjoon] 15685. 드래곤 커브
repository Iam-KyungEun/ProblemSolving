#include <iostream> 
#include <queue>
#include <vector>

using namespace std;
const int MAX = 105;

int map[MAX][MAX];
bool check[MAX][MAX];
int x,y,d,g;
int dy[4]={0,-1,0,1};
int dx[4]={1,0,-1,0};

queue <int> Q;
vector <int> V;

void sol(int gen,int sy,int sx){
	if(gen>=g){
		return;
	}
	else{
		int curY=sy;
		int curX=sx;
		while(!Q.empty()){
			int dir=Q.front();
			if(dir==0) dir=1;
			else if(dir==1) dir=2;
			else if(dir==2) dir=3;
			else if(dir==3) dir=0;
			
			curY=curY+dy[dir];
			curX=curX+dx[dir];
			check[curY][curX]=true;
			V.push_back(dir);
			Q.pop();
		}
		for(int i=V.size()-1;i>=0;i--){
			Q.push(V[i]);
		}
		sol(gen+1,curY,curX);
	}
	
}
int main(){
	int N;
	cin>>N;
	for(int i=0;i<N;i++){
		cin>>x>>y>>d>>g;
		Q.push(d);
		V.push_back(d);
		check[y][x]=true;
		y=y+dy[d];
		x=x+dx[d];
		check[y][x]=true;
		sol(0,y,x);
		vector <int>().swap(V);
		while(!Q.empty()) Q.pop();
	}
	int cnt=0;
	for(int i=0;i<=99;i++){
		for(int j=0;j<=99;j++){
			if(check[i][j]==true){
				if(check[i][j+1]==true && check[i+1][j]==true && check[i+1][j+1]==true){
					cnt++;
				}
			}
		}
	}
	cout<<cnt;
	return 0;
}
