#include <iostream>
#include <queue>
#include <string>

using namespace std;

const int MAX = 100;

char map[MAX][MAX];
bool check[MAX][MAX];
int dy[4]={-1,1,0,0};
int dx[4]={0,0,-1,1};
int N,M;

int BFS(int y,int x){
	int cnt=1;
	queue < pair<int,int> > Q;
	check[y][x]=true;
	Q.push({y,x});
	while(!Q.empty()){
		int curY=Q.front().first;
		int curX=Q.front().second;
		
		Q.pop();
		
		for(int i=0;i<4;i++){
			int ny=curY+dy[i];
			int nx=curX+dx[i];
			if(ny>=0 && nx>=0 && ny<M && nx<N && map[ny][nx]==map[curY][curX] && !check[ny][nx]){
				check[ny][nx]=true;
				Q.push({ny,nx});
				cnt++;	
			}
		}
	}	
	return cnt;	
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	string str;
	
	cin>>N>>M;
	
	for(int i=0;i<M;i++){
		cin>>str;
		for(int j=0;j<str.length();j++){
			map[i][j]=str[j];
		}
	}
	
	int B=0, W=0;
	for(int i=0;i<M;i++){
		for(int j=0;j<N;j++){
			if(!check[i][j]) {
				int cnt = BFS(i,j);
				if(map[i][j]=='B'){
					B+=(cnt*cnt);
				}else{
					W+=(cnt*cnt);
				}
				
			}	
		}
	}
	cout<<W<<' '<<B;
    return 0;
}
