#include <iostream>

using namespace std;
const int MAX  = 501;

int map[MAX][MAX];
bool check[MAX][MAX];
int N,M,maxsum;
int dy[4]={-1,1,0,0};
int dx[4]={0,0,-1,1};

void dfs(int y,int x,int idx,int sum){
	if(idx>=4){
		if(sum>maxsum) maxsum=sum;
	}
	else{
		for(int k=0;k<4;k++){
			int ny=y+dy[k];
			int nx=x+dx[k];
			if(ny>=0 && nx>=0 && ny<N && nx<M && !check[ny][nx]){
				check[ny][nx]=true;
				dfs(ny,nx,idx+1,sum+map[ny][nx]);
				check[ny][nx]=false;
			}
		}
	}
}

void cross(int y,int x){
	int min=987987,sum=map[y][x],cnt=0;
	for(int i=0;i<4;i++){
		int ny=y+dy[i];
		int nx=x+dx[i];
		if(ny>=N || nx>=M || ny<0 || nx<0){
			continue;
		}
		if(map[ny][nx]<min) min=map[ny][nx];
		cnt++;
		sum+=map[ny][nx];
	}
	if(cnt<3) return;
	if(cnt>=4) sum-=min;
	if(sum>maxsum) maxsum= sum;
}

int main(){
		
	cin>>N>>M;
	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++){
			cin>>map[i][j];
		}
	}
	
	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++){
			check[i][j]=true;
			dfs(i,j,1,map[i][j]);
			cross(i,j);
			check[i][j]=false;
		}
	}
	cout<<maxsum;
	return 0;
}
